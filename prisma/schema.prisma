// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User{
  id Int @default(autoincrement()) @id
  username String 
  email String @unique @db.VarChar(225)
  password String
  salt String?
  authentication Authentication?
}

model Authentication{
  id Int @default (autoincrement()) @id
  sessionToken String @unique
  userId Int @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model User {
//   id Int @default(autoincrement()) @id
//   email String @unique
//   firstName String
//   lastName String
//   social Json?
//   //Relation Fields
//   courses CourseEnrollment[]
//   testResults TestResult[] @relation(name: "results")
//   testsGraded TestResult[] @relation(name: "graded")
// }


// model Course {
//   id Int @default(autoincrement()) @id
//   name String
//   courseDetails String?

//   members CourseEnrollment[]
//   tests Test[]
// }

// model CourseEnrollment {
//   createdAt DateTime @default(now())
//   role UserRole
//   //Relation Fields
//   userId Int
//   user User @relation(fields: [userId], references: [id])
//   courseId Int
//   course Course @relation(fields: [courseId], references: [id])

//   @@id([userId, courseId])
//   @@index([userId, role])
// }

// model Test {
//   id Int @default(autoincrement()) @id
//   updatedAt DateTime @updatedAt
//   name String //Name of the test
//   date DateTime //Date of the test
//   //Relation Fields
//   courseId Int
//   course Course @relation(fields: [courseId], references: [id])
//   testResults TestResult[]
// }


// model TestResult{
//   id Int @default(autoincrement()) @id
//   createdAt DateTime @default(now())
//   result Int //Percentage precise to one decimal point represented as `result * 10^-1`

//   //*Relation Fields
//   studentId Int
//   student User @relation(name: "results", fields: [studentId], references: [id])
//   graderId Int
//   gradedBy User @relation(name: "graded", fields: [graderId], references: [id])
//   testId Int
//   test Test @relation(fields: [testId], references: [id])
// }


// enum UserRole{
//   STUDENT
//   TEACHER
// }